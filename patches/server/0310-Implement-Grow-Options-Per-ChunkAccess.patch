From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ibramsou <kasobanboui@gmail.com>
Date: Fri, 26 Apr 2024 09:24:42 +0200
Subject: [PATCH] Implement Grow Options Per ChunkAccess


diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 0ec23f178d59957d28d8c8ac0117985a2fb19c55..26857d9646468890a97d5ace7e653abc452ee7ed 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -19,6 +19,7 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
@@ -77,7 +78,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (world.isGrowWithoutLight() || world.getRawBrightness(pos, 0) >= 9) {
+        if (world.isGrowWithoutLight() || ChunkAccess.isGrowWithoutLight(pos) || world.getRawBrightness(pos, 0) >= 9) {
             int i = this.getAge(state);
 
             if (i < this.getMaxAge()) {
@@ -173,7 +174,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
     }
 
     protected static boolean hasSufficientLight(LevelReader world, BlockPos pos) {
-        return world.isGrowWithoutLight() || world.getRawBrightness(pos, 0) >= 8;
+        return world.isGrowWithoutLight() || ChunkAccess.isGrowWithoutLight(pos) || world.getRawBrightness(pos, 0) >= 8;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index d178e22547fd190d8b4de96eb2806d6a3ea96fc9..cc139ccee484db5b94282429ce92a61a0a6e4dee 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -24,6 +24,7 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.shapes.CollisionContext;
@@ -95,7 +96,7 @@ public class FarmBlock extends Block {
         if (i > 0 && world.paperConfig().tickRates.wetFarmland != 1 && (world.paperConfig().tickRates.wetFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.wetFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
         if (i == 0 && world.paperConfig().tickRates.dryFarmland != 1 && (world.paperConfig().tickRates.dryFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % world.paperConfig().tickRates.dryFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
 
-        if (!world.isGrowWithoutWater() && !FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) { // Skylodia
+        if (!world.isGrowWithoutWater() && !ChunkAccess.isGrowWithoutWater(pos) && !FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) { // Skylodia
             if (i > 0) {
                 org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, i - 1), 2); // CraftBukkit
             } else if (!FarmBlock.shouldMaintainFarmland(world, pos)) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index f7e5e016a7028a9196e689e950805b0d5b31fe38..fa35088558e107ebdef38a0c4497af9daa8443d4 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -10,8 +10,10 @@ import it.unimi.dsi.fastutil.shorts.ShortList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.EnumSet;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Objects;
 import java.util.Set;
 import java.util.function.BiConsumer;
 import java.util.function.Function;
@@ -95,6 +97,55 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
 
     private volatile boolean[] blockEmptinessMap;
 
+    // Skylodia Start - Grow Options
+
+    private static final Set<Integer> growWithoutLightChunks = new HashSet<>();
+    private static final Set<Integer> growWithoutWaterChunks = new HashSet<>();
+
+    public static boolean isGrowWithoutLight(BlockPos pos) {
+        return growWithoutLightChunks.contains(hashedBlockPos(pos));
+    }
+
+    public static boolean isGrowWithoutWater(BlockPos pos) {
+        return growWithoutWaterChunks.contains(hashedBlockPos(pos));
+    }
+
+    private static int hashedBlockPos(BlockPos pos) {
+        return Objects.hash(pos.getX() >> 4, pos.getZ() >> 4);
+    }
+
+    private static int hashedChunk(ChunkAccess access) {
+        return Objects.hash(access.chunkPos.x, access.chunkPos.z);
+    }
+
+    public boolean isGrowWithoutLight() {
+        return growWithoutLightChunks.contains(hashedChunk(this));
+    }
+
+    public void setGrowWithoutLight(final boolean growWithoutLight) {
+        int hashed = hashedChunk(this);
+        if (growWithoutLight) {
+            growWithoutLightChunks.add(hashed);
+        } else {
+            growWithoutLightChunks.remove(hashed);
+        }
+    }
+
+    public boolean isGrowWithoutWater() {
+        return growWithoutWaterChunks.contains(hashedChunk(this));
+    }
+
+    public void setGrowWithoutWater(final boolean growWithoutWater) {
+        int hashed = hashedChunk(this);
+        if (growWithoutWater) {
+            growWithoutWaterChunks.add(hashed);
+        } else {
+            growWithoutWaterChunks.remove(hashed);
+        }
+    }
+
+    // Skylodia End
+
     public ca.spottedleaf.starlight.common.light.SWMRNibbleArray[] getBlockNibbles() {
         return this.blockNibbles;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index dca5f25cf331b5550e9be491b4e8a3466531e021..dcb0f2e668e1f93d81634c345c9b80fe2f16e653 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -372,6 +372,26 @@ public class CraftChunk implements Chunk {
         return this.getCraftWorld().getStructures(this.getX(), this.getZ(), structure);
     }
 
+    @Override
+    public boolean isGrowWithoutLight() {
+        return this.getHandle(ChunkStatus.STRUCTURE_STARTS).isGrowWithoutLight();
+    }
+
+    @Override
+    public void setGrowWithoutLight(final boolean growWithoutLight) {
+        this.getHandle(ChunkStatus.STRUCTURE_STARTS).setGrowWithoutLight(growWithoutLight);
+    }
+
+    @Override
+    public boolean isGrowWithoutWater() {
+        return this.getHandle(ChunkStatus.STRUCTURE_STARTS).isGrowWithoutWater();
+    }
+
+    @Override
+    public void setGrowWithoutWater(final boolean growWithoutWater) {
+        this.getHandle(ChunkStatus.STRUCTURE_STARTS).setGrowWithoutWater(growWithoutWater);
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
